{"version":3,"file":"static/js/544.c9f371a1.chunk.js","mappings":"wKAGaA,EAAa,SAAH,GAA+C,IAAzCC,EAAQ,EAARA,SAC3B,OACE,SAAC,IAAS,CACRC,UAAWC,EAAAA,EACXC,SAAS,KACTC,GAAI,CACFC,GAAI,EACJC,GAAI,GACJ,SAEDN,GAGP,C,qOCPaO,EAAW,WACtB,OAA2BC,EAAAA,EAAAA,WAAS,GAAM,eAAnCC,EAAM,KAAEC,EAAQ,KACvB,GAA6BF,EAAAA,EAAAA,UAAS,eAAc,eAA7CG,EAAO,KAAEC,EAAS,KAIjBC,GAAMC,EAAAA,EAAAA,MAAND,EA4BR,OACE,SAACE,EAAA,EAAK,CAACC,eAAe,SAASC,WAAW,SAAQ,SAC/CR,GACC,UAACM,EAAA,EAAK,CAACC,eAAe,SAASC,WAAW,SAAQ,WAChD,SAACC,EAAA,EAAU,CAACC,QAAQ,KAAKC,UAAU,SAAQ,SACxCP,EAAE,oCAEL,SAACQ,EAAA,EAAS,CAACpB,UAAU,MAAMqB,M,inBAAWlB,GAAI,CAAED,SAAU,WAGxD,UAAC,IAAG,CAACA,SAAU,IAAKoB,MAAO,EAAE,WAC3B,SAAC,IAAQ,CACPC,WAAYb,EACZc,MAAO,IACPC,MA5BW,CACnBvB,SAAU,QACVoB,MAAO,OACPI,OAAQ,EACRC,aAAc,QAyBNC,QA9CgB,WACxBnB,GAAS,EACX,EA6CUoB,OA3Ce,SAACC,GACxB,GAAIA,EAAQ,CACV,IAAMC,EAAOC,OAAOC,SAASC,OAAM,gBAC7BC,EAAcL,EAAOM,KAAKC,MAAM,KAGlCN,IAFQI,EAAY,GAAK,KAAOA,EAAY,GAAK,gBAGnDH,OAAOC,SAAWH,EAAOM,KAErBN,EAAOM,KAAKE,OAAS,GAAGC,EAAAA,GAAAA,MAAY3B,EAAE,0BAE9C,CACF,KAiCQ,SAAC4B,EAAA,EAAU,CACTrC,GAAI,CAAEuB,OAAQ,EAAGe,IAAK,GAAIC,GAAI,GAC9BC,QA5Be,WACvBhC,GAAU,SAACiC,GACT,MAAa,SAATA,EACK,cACK,MAChB,GACF,EAsBoC,UAE1B,SAACC,EAAA,EAAiB,CAACC,SAAS,QAAQC,MAAM,oBAMtD,E,UCxBA,EA1CgB,WACd,IAAQnC,GAAMC,EAAAA,EAAAA,MAAND,EACR,OACE,UAAC,IAAU,YACT,UAACoC,EAAA,EAAG,CAACC,GAAI,EAAG3B,MAAO,EAAE,WACnB,SAAC4B,EAAA,EAAI,CACHC,OACE,SAAClC,EAAA,EAAU,CAACC,QAAQ,KAAI,SAAEN,EAAE,4BAGhC,SAACwC,EAAA,EAAO,QAEV,UAACtC,EAAA,EAAK,CACJuC,UAAW,CAAEC,GAAI,MAAOC,GAAI,MAAOC,GAAI,SAAUC,GAAI,UACrDC,IAAK,CAAEJ,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAI,WAEpC,SAAC3C,EAAA,EAAK,CACJE,WAAW,SACXd,SAAU,CAAEoD,GAAI,IAAKC,GAAI,IAAKC,GAAI,EAAGC,GAAI,GACzCnC,MAAO,EAAE,UAET,SAAC0B,EAAA,EAAG,CAAC9C,SAAU,IAAKoB,MAAO,EAAE,UAC3B,SAAC,IAAU,WACT,SAAChB,EAAQ,WAKf,SAAC0C,EAAA,EAAG,CAACP,GAAI,EAAGnB,MAAO,EAAE,UACnB,UAACqC,EAAA,EAAK,CAACC,SAAS,UAAS,WACvB,SAACZ,EAAA,EAAG,CAACC,GAAI,EAAE,UACT,SAAChC,EAAA,EAAU,CAACC,QAAQ,KAAI,SAAEN,EAAE,6BAE9B,SAACoC,EAAA,EAAG,WACF,SAAC/B,EAAA,EAAU,UAAEL,EAAE,iDAO7B,C","sources":["other/layouts/mainLayout.tsx","modules/main/readeQr/qrReader.jsx","pages/main/readeQR/index.tsx"],"sourcesContent":["import { Container, Paper } from \"@mui/material\";\r\nimport { ReactNode } from \"react\";\r\n\r\nexport const MainLayout = ({ children }: { children: ReactNode }) => {\r\n  return (\r\n    <Container\r\n      component={Paper}\r\n      maxWidth=\"xl\"\r\n      sx={{\r\n        my: 3,\r\n        py: 3,\r\n      }}\r\n    >\r\n      {children}\r\n    </Container>\r\n  );\r\n};\r\n","import FlipCameraIosIcon from \"@mui/icons-material/FlipCameraIos\";\nimport { Box, CardMedia, IconButton, Typography } from \"@mui/material\";\nimport { Stack } from \"@mui/system\";\nimport React, { useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { useTranslation } from \"react-i18next\";\nimport QrReader from \"react-web-qr-reader\";\n\nimport qr from \"../../../other/images/qrcode.png\";\nexport const ReaderQR = () => {\n  const [errors, setError] = useState(false);\n  const [seletct, setSelect] = useState(\"environment\");\n  const handleErrorWebCam = () => {\n    setError(true);\n  };\n  const { t } = useTranslation();\n  const handleScanWebCam = (result) => {\n    if (result) {\n      const code = window.location.origin + `/main/donate/`;\n      const resultSplit = result.data.split(\"/\");\n      const res = resultSplit[0] + \"//\" + resultSplit[2] + \"/main/donate/\";\n\n      if (code === res) {\n        window.location = result.data;\n      } else {\n        if (result.data.length > 5) toast.error(t(\"main.readeQR.qrNoValid\"));\n      }\n    }\n  };\n  const previewStyle = {\n    maxWidth: \"300px\",\n    width: \"100%\",\n    zIndex: 2,\n    borderRadius: \"20px\",\n  };\n  const handleFlipCamera = () => {\n    setSelect((prev) => {\n      if (prev === \"user\") {\n        return \"environment\";\n      } else return \"user\";\n    });\n  };\n\n  return (\n    <Stack justifyContent=\"center\" alignItems=\"center\">\n      {errors ? (\n        <Stack justifyContent=\"center\" alignItems=\"center\">\n          <Typography variant=\"h6\" textAlign=\"center\">\n            {t(\"main.readeQR.cameraPermission\")}\n          </Typography>\n          <CardMedia component=\"img\" image={qr} sx={{ maxWidth: 244 }} />\n        </Stack>\n      ) : (\n        <Box maxWidth={300} width={1}>\n          <QrReader\n            facingMode={seletct}\n            delay={1000}\n            style={previewStyle}\n            onError={handleErrorWebCam}\n            onScan={handleScanWebCam}\n          />\n          <IconButton\n            sx={{ zIndex: 4, mt: -15, ml: 3 }}\n            onClick={handleFlipCamera}\n          >\n            <FlipCameraIosIcon fontSize=\"large\" color=\"secondary\" />\n          </IconButton>\n        </Box>\n      )}\n    </Stack>\n  );\n};\n","import { Alert, Chip, Divider, Typography } from \"@mui/material\";\r\nimport { Box, Stack } from \"@mui/system\";\r\nimport { ReaderQR } from \"modules/main/readeQr/qrReader\";\r\nimport { MainLayout } from \"other/layouts/mainLayout\";\r\nimport { useTranslation } from \"react-i18next\";\r\nconst ReadeQR = () => {\r\n  const { t } = useTranslation();\r\n  return (\r\n    <MainLayout>\r\n      <Box mb={2} width={1}>\r\n        <Chip\r\n          label={\r\n            <Typography variant=\"h1\">{t(\"main.readeQR.scanQR\")}</Typography>\r\n          }\r\n        />\r\n        <Divider />\r\n      </Box>\r\n      <Stack\r\n        direction={{ lg: \"row\", md: \"row\", sm: \"column\", xs: \"column\" }}\r\n        gap={{ lg: 2, md: 2, sm: 0, xs: 0 }}\r\n      >\r\n        <Stack\r\n          alignItems=\"center\"\r\n          maxWidth={{ lg: 300, md: 300, sm: 1, xs: 1 }}\r\n          width={1}\r\n        >\r\n          <Box maxWidth={300} width={1}>\r\n            <MainLayout>\r\n              <ReaderQR />\r\n            </MainLayout>\r\n          </Box>\r\n        </Stack>\r\n\r\n        <Box mt={3} width={1}>\r\n          <Alert severity=\"warning\">\r\n            <Box mb={1}>\r\n              <Typography variant=\"h2\">{t(\"main.readeQR.warning\")}</Typography>\r\n            </Box>\r\n            <Box>\r\n              <Typography>{t(\"main.readeQR.warningDescription\")}</Typography>\r\n            </Box>\r\n          </Alert>\r\n        </Box>\r\n      </Stack>\r\n    </MainLayout>\r\n  );\r\n};\r\nexport default ReadeQR;\r\n"],"names":["MainLayout","children","component","Paper","maxWidth","sx","my","py","ReaderQR","useState","errors","setError","seletct","setSelect","t","useTranslation","Stack","justifyContent","alignItems","Typography","variant","textAlign","CardMedia","image","width","facingMode","delay","style","zIndex","borderRadius","onError","onScan","result","code","window","location","origin","resultSplit","data","split","length","toast","IconButton","mt","ml","onClick","prev","FlipCameraIos","fontSize","color","Box","mb","Chip","label","Divider","direction","lg","md","sm","xs","gap","Alert","severity"],"sourceRoot":""}