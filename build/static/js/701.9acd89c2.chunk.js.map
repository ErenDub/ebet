{"version":3,"file":"static/js/701.9acd89c2.chunk.js","mappings":"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","sources":["modules/registration/registrationFetch.ts","pages/registration/index.tsx"],"sourcesContent":["import { Request } from \"other/request\";\r\n\r\nimport { TRegistration } from \"./registrationType\";\r\nexport type RegistrationInputs = {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n  passwordConfirm: string;\r\n};\r\nexport const registration = async (registrationFields: RegistrationInputs) =>\r\n  Request<TRegistration>(\"/auth/signup\", \"POST\", registrationFields);\r\n","import { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Grid,\r\n  Stack,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport { setGlobalAccessToken } from \"modules/login/context/accessToken\";\r\nimport { useAuthContext } from \"modules/login/context/authContext\";\r\nimport { setRefreshToken } from \"modules/login/token\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useMutation } from \"react-query\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport * as yup from \"yup\";\r\n\r\nimport {\r\n  registration,\r\n  RegistrationInputs,\r\n} from \"../../modules/registration/registrationFetch\";\r\nimport logo from \"../../other/images/logo.png\";\r\ntype RegistrationFields = {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n  passwordConfirm: string;\r\n};\r\nconst Registration = () => {\r\n  const schema = yup.object().shape({\r\n    name: yup.string().required(),\r\n    email: yup.string().required(),\r\n    password: yup.string().required().min(8, \"Must be at lease 8 symbols\"),\r\n    passwordConfirm: yup\r\n      .string()\r\n      .oneOf([yup.ref(\"password\"), null], \"Passwords does not match\")\r\n      .required(),\r\n  });\r\n  const navigate = useNavigate();\r\n  const { t, i18n } = useTranslation();\r\n  const changeLanguage = (lng: string) => {\r\n    i18n.changeLanguage(lng);\r\n  };\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<RegistrationFields>({\r\n    defaultValues: {\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      passwordConfirm: \"\",\r\n    },\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  const $registration = useMutation((data: RegistrationInputs) =>\r\n    registration(data)\r\n  );\r\n  const { setCheckAuth, setUserInfo } = useAuthContext();\r\n\r\n  const onSubmit = (data: RegistrationFields) => {\r\n    $registration.mutate(data, {\r\n      onSuccess: (data) => {\r\n        setRefreshToken(data.refreshToken);\r\n        setGlobalAccessToken(data.accessToken);\r\n        setCheckAuth(data.accessToken);\r\n        const user: {\r\n          name: string;\r\n          email: string;\r\n          picture: string;\r\n          role: string;\r\n          _id: string;\r\n        } = data.user;\r\n        setUserInfo(user);\r\n        setCheckAuth(data.refreshToken);\r\n        user.role === \"user\" && navigate(\"/main\");\r\n        user.role === \"Admin\" && navigate(\"/quizlist\");\r\n        user.role === \"Super\" && navigate(\"/adminlist\");\r\n      },\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <Stack\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        height=\"100vh\"\r\n        width={1}\r\n        sx={{\r\n          background:\r\n            \" linear-gradient(45deg, rgba(140,17,193,1) 0%, rgba(68,63,224,1) 47%, rgba(17,171,203,1) 100%)\",\r\n        }}\r\n      >\r\n        <Box component=\"img\" src={logo} sx={{ width: 100, mb: 5 }}></Box>\r\n\r\n        <Stack\r\n          justifyContent=\"center\"\r\n          width={1}\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n          sx={{\r\n            background: \"background\",\r\n            maxWidth: { lg: \"400px\", xs: \"300px\" },\r\n            borderRadius: 1,\r\n            p: \"20px 20px 50px 20px\",\r\n          }}\r\n        >\r\n          <Stack>\r\n            <ButtonGroup size=\"small\">\r\n              <Button\r\n                variant={\r\n                  localStorage.getItem(\"i18nextLng\") === \"en\"\r\n                    ? \"contained\"\r\n                    : \"outlined\"\r\n                }\r\n                onClick={(e) => changeLanguage(\"en\")}\r\n              >\r\n                EN\r\n              </Button>\r\n              <Button\r\n                variant={\r\n                  localStorage.getItem(\"i18nextLng\") === \"ru\"\r\n                    ? \"contained\"\r\n                    : \"outlined\"\r\n                }\r\n                onClick={(e) => changeLanguage(\"ru\")}\r\n              >\r\n                RU\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Stack>\r\n          <Typography variant=\"h1\"> {t(\"login.registration\")}</Typography>\r\n          <Box\r\n            sx={{\r\n              width: \"100%\",\r\n            }}\r\n          >\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <Stack direction=\"column\">\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} lg={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      name=\"name\"\r\n                      render={({ field }) => (\r\n                        <TextField\r\n                          fullWidth\r\n                          label={t(\"login.fullName\")}\r\n                          type=\"text\"\r\n                          required\r\n                          error={!!errors.name}\r\n                          {...field}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <Controller\r\n                      control={control}\r\n                      name=\"email\"\r\n                      render={({ field }) => (\r\n                        <TextField\r\n                          fullWidth\r\n                          label={t(\"login.email\")}\r\n                          type=\"text\"\r\n                          required\r\n                          error={!!errors.email}\r\n                          {...field}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} lg={6}>\r\n                    <Controller\r\n                      control={control}\r\n                      name=\"password\"\r\n                      render={({ field, fieldState: { error } }) => (\r\n                        <TextField\r\n                          fullWidth\r\n                          label={t(\"login.password\")}\r\n                          type=\"password\"\r\n                          required\r\n                          error={!!errors.password}\r\n                          {...field}\r\n                          helperText={error?.message}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} lg={6}>\r\n                    <Controller\r\n                      control={control}\r\n                      name=\"passwordConfirm\"\r\n                      render={({ field, fieldState: { error } }) => (\r\n                        <TextField\r\n                          fullWidth\r\n                          label={t(\"login.rpassword\")}\r\n                          type=\"password\"\r\n                          required\r\n                          error={!!errors.passwordConfirm}\r\n                          {...field}\r\n                          helperText={error?.message}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Stack direction=\"row\" mt={2} gap={1}>\r\n                  <Button\r\n                    fullWidth\r\n                    type=\"submit\"\r\n                    disabled={$registration.isLoading}\r\n                  >\r\n                    {t(\"login.submit\")}\r\n                  </Button>\r\n                  <Button\r\n                    onClick={() => navigate(\"/\")}\r\n                    fullWidth\r\n                    variant=\"text\"\r\n                    color=\"secondary\"\r\n                  >\r\n                    {t(\"login.login\")}\r\n                  </Button>\r\n                </Stack>\r\n              </Stack>\r\n            </form>\r\n          </Box>\r\n        </Stack>\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\nexport default Registration;\r\n"],"names":["registration","registrationFields","Request","schema","yup","shape","name","required","email","password","min","passwordConfirm","oneOf","navigate","useNavigate","useTranslation","t","i18n","changeLanguage","lng","useForm","defaultValues","resolver","yupResolver","control","handleSubmit","errors","formState","$registration","useMutation","data","useAuthContext","setCheckAuth","setUserInfo","Stack","justifyContent","alignItems","height","width","sx","background","Box","component","src","logo","mb","spacing","maxWidth","lg","xs","borderRadius","p","ButtonGroup","size","Button","variant","localStorage","getItem","onClick","e","Typography","onSubmit","mutate","onSuccess","setRefreshToken","refreshToken","setGlobalAccessToken","accessToken","user","role","direction","Grid","container","item","render","field","TextField","fullWidth","label","type","error","fieldState","helperText","message","mt","gap","disabled","isLoading","color"],"sourceRoot":""}